{% extends 'layout.twig' %}

{% set head_title = 'Change Password' %}

{% block css %}
	{{ parent() }}
{% endblock %}

{% block content %}
	<h1>Change Password</h1>
	<form action="{{ route('change-password') }}" method="POST" id="password-form">
		<input type="hidden" name="csrf" value="{{ csrf }}" />
		{% if error %}
			<p class="error-message">{{ error }}</p>
		{% endif %}
		<div class="form-group">
			<label for="current">Current Password:</label>
			<input type="password" id="current" name="current" required aria-required="true" />
		</div>
		<div class="form-group">
			<label for="password1">New Password:</label>
			<input type="password" id="password1" name="password1" required aria-required="true" />
			<div class="password-strength-meter">
				<div id="strength-meter"></div>
			</div>
			<div id="password-feedback" class="password-feedback"></div>
			<div id="password-suggestions" class="password-suggestions"></div>
		</div>
		<div class="form-group">
			<label for="password2">Repeat Password:</label>
			<input type="password" id="password2" name="password2" required aria-required="true" />
		</div>
		<button type="submit" id="submit-button">Save</button>
	</form>


<script>
document.addEventListener('DOMContentLoaded', function() {
    const passwordField = document.getElementById('password1');
    const strengthMeter = document.getElementById('strength-meter');
    const feedbackDiv = document.getElementById('password-feedback');
    const suggestionsDiv = document.getElementById('password-suggestions');
    const submitButton = document.getElementById('submit-button');
    let passwordStrong = false;

    passwordField.addEventListener('input', debounce(function() {
        const password = passwordField.value;

        if (password.length === 0) {
            strengthMeter.className = '';
            feedbackDiv.textContent = '';
            suggestionsDiv.innerHTML = '';
            return;
        }

        // Send AJAX request to check password strength
        fetch('/api/check-password-strength', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ password: password })
        })
        .then(response => response.json())
        .then(data => {
            // Update the strength meter
            strengthMeter.className = '';

            switch(data.score) {
                case 0:
                    strengthMeter.className = 'strength-very-weak';
                    break;
                case 1:
                    strengthMeter.className = 'strength-weak';
                    break;
                case 2:
                    strengthMeter.className = 'strength-medium';
                    break;
                case 3:
                    strengthMeter.className = 'strength-strong';
                    break;
                case 4:
                    strengthMeter.className = 'strength-very-strong';
                    break;
            }

            // Update feedback
            feedbackDiv.textContent = data.feedback || data.strengthLabel;

            // Update suggestions
            if (data.suggestions && data.suggestions.length > 0) {
                suggestionsDiv.innerHTML = '<ul>' +
                    data.suggestions.map(suggestion => `<li>${suggestion}</li>`).join('') +
                    '</ul>';
            } else {
                suggestionsDiv.innerHTML = '';
            }

            // Update password strong status
            passwordStrong = data.isStrong;
        })
        .catch(error => {
            console.error('Error checking password strength:', error);
        });
    }, 300));

    // Form submission validation
    document.getElementById('password-form').addEventListener('submit', function(e) {
        const password1 = document.getElementById('password1').value;
        const password2 = document.getElementById('password2').value;

        if (!passwordStrong) {
            e.preventDefault();
            alert('Please choose a stronger password.');
            return false;
        }

        if (password1 !== password2) {
            e.preventDefault();
            alert('Passwords do not match.');
            return false;
        }
    });

    // Debounce function to limit how often the AJAX calls are made
    function debounce(func, wait) {
        let timeout;
        return function(...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => {
                func.apply(this, args);
            }, wait);
        };
    }
});
</script>
{% endblock %}
